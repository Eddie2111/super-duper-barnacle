# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
## input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type S3Object @model @auth(
  rules: [
    {
      allow: owner , 
      operations: [create, update, read, delete]
    }
      ]
        ) {
            id          : ID! 
            name        : String!
            bucket      : String!
            key         : String!
            contentType : String!
            createdAt   : AWSDateTime!
            updatedAt   : AWSDateTime!
}
enum Enum_service{
  Cinematography
  Photography
  Videography
  Decoration
}
type Todo @model  @auth(
  rules: [
    {
      allow: owner , 
      operations: [create, update, read, delete]
    }
      ]
        ) {
            id: ID!
            name: String!
            description: String!
          }
type Service @model @auth(
  rules: [
    {
      allow: owner , 
      operations: [create, update, read, delete]
    }
      ]
        ) {
          serviceName: String!
          firstname: String!
          lastname : String!
          email: String!
          password: String!
          personalInformation: Personal @hasOne
          professionalInformation: Professional @hasOne
}

type Personal @model @auth(
  rules: [
    {
      allow: owner , 
      operations: [create, update, read, delete]
    }
      ]
        ) {
          details: String!
          photo: S3Object!
          address: String!
          nidfront: S3Object!
          nidback: S3Object!
          service: Service! @hasOne
}

type Professional @model @auth(
  rules: [
    {
      allow: owner , 
      operations: [create, update, read, delete]
    }
      ]
        ) {
            plate: String!
            specialize: String!
            serviceName: String!
            device: String!
            yearsofExperience: String!
            location: String! 
            photographyLocation: String!
            portfolioImages: [S3Object!] 
            service: Service! @hasOne
}




## will not be used, kept as template
type Task
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Managers"], operations: [create, update, read, delete] }
      { allow: groups, groups: ["Employees"], operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  status: String
}

type PrivateNote @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  content: String!
}
## will not be used, kept as template
